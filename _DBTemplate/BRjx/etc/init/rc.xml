<rc id="9ecb0d1c-85c7-4064-98f5-f3b1aa28262e">
  <records>
    <record id="ea3a70dd-60a7-47ac-b986-bd6a11dca7d9" create="2018-01-01T00:00:00.000Z" read="2018-01-22T05:56:53.000Z" update="2018-01-22T05:56:53.000Z" delete="">
      <path>BRjx_workers/lib/</path>
      <name>worker</name>
      <type>js</type>
      <version>0.0.1</version>
      <properties/>
      <script>
<![CDATA[
/**
 * @fileOverview ...
 * @author Arthur Stocker
 * @version 0.0.1
 */


/**
 * config ...
 */


/**
 * export ( ... )
 * 
 * eslint-disable 
 */

/* eslint-enable */


/**
 * const ...
 */
const log = Logger.getLogger(module.id);


/**
 * var ...
 */
var watchdogID;
var name;


/**
 * default values
 */
var type = module.id.replace(/.*\/(\w*\b)$/, '$1');


/**
 * Create a Worker interface
 * @see -
 * @param -
 * @since 0.0.1
 * @returns {event}
 */
var onmessage = function(event) {
    var { data } = event;

    if (data.action == 'register') {
        if (!name)
            name = data.name;
        if (brjx.cache.application.items[name].watchdog == 0)
            brjx.cache.application.items[name].watchdog = (new Date()).getTime();
        watchdogID = setInterval(function() {
            var startHandler = (new Date()).getTime();

            brjx.cache.application.items[name].watchdog = (new Date()).getTime();
        }, brjx.config.get('watchdog.worker.interval') * 1 || 2500);

        log.debug('Worker ' + name + ' registered');
    }
};
]]>
      </script>
    </record>
    <record id="e4ae1256-a2a3-49b7-ab51-1c0fc615b7a5">
      <path>BRjx_workers/</path>
      <name>monitor</name>
      <type>js</type>
      <version>0.0.1</version>
      <properties/>
      <script>
<![CDATA[
/**
 * @fileOverview ...
 * @author Arthur Stocker
 * @version 0.0.1
 */


/**
 * config ...
 */
brjx.config.merge(module.resolve('./default.properties'));


/**
 * export ( ... )
 * 
 * eslint-disable 
 */
export (
    'Monitor'
);
/* eslint-enable */


/**
 * const ...
 */
const { Worker } = require("ringo/worker");
const log = Logger.getLogger(module.id);


/**
 * var ...
 */


/**
 * default values
 */


/**
 * Create a Monitor object
 * @see -
 * @param -
 * @since 0.0.1
 * @returns {object} Monitor object
 */
function Monitor() {
    if (!(this instanceof Monitor)) {
        return new Monitor();
    }

    // local variables
    var self = this;


    if (({}).toString.call(brjx).replace(/.*\s(.*)\]/, '$1') != 'Object')
        return {};
    if (({}).toString.call(brjx.cache).replace(/.*\s(.*)\]/, '$1') != 'Object')
        return {};


/**
 *
 *
 *
    brjx.cache.addListener('....', function() {
        log.info('Cache refreshed, reload Worker !');
        let startHandler = (new Date()).getTime();

        reloadWorkers();

        let elapsed = '' + ((new Date()).getTime() - startHandler);
        log.info(Array(8 - elapsed.length).join(' ') + elapsed + 'ms reload Workers');
    });
*/


    /**
    * ...
    * @see -
    * @param -
    * @since 0.0.1
    * @returns -
    */
    function getCacheItems() {
        var client = new BaseXClient();
        var query = new BaseXQuery();

        query.string = 'brjx:getCacheItems()';

        return client.execQuery(query).data;
    }


    /**
     * ...
     * @see -
     * @param -
     * @since 0.0.1
     * @returns -
     */
    Object.defineProperty(self, 'watchdog', {
        value: function() {
            if (!brjx.cache.application.items) 
                brjx.cache.application.items = {};
            if (!brjx.cache.application.lastCacheRead)
                brjx.cache.application.lastCacheRead = 0;

            if (({}).toString.call(brjx.cache).replace(/.*\s(.*)\]/, '$1') != 'Object')
                return;

            self.watchdogID = setInterval(function() {
                var startHandler = (new Date()).getTime();
                
                if (brjx.cache.application.lastCacheRead * 1 + (brjx.config.get('cache.timeout') * 1 || 600000) < startHandler) {
                    let cache = getCacheItems()[1]; 

                    brjx.cache.emit('cache-refresh', 'application');
                    for (var i=1; i < cache.length; i++) {
                        brjx.cache.application.items[cache[i][1]] = {name: cache[i][1], data: {}};
                    }
                    brjx.cache.application.lastCacheRead = (new Date()).getTime();
                    brjx.cache.emit('cache-refreshed', 'application');
                }

                for each (var app in brjx.cache.application.items) {
                    if (!brjx.cache.application.items[app.name].watchdog)
                        brjx.cache.application.items[app.name].watchdog = 0;
                    if (
                        brjx.cache.application.items[app.name].watchdog  * 1 + (brjx.config.get('watchdog.interval') * 2 || 5000) < startHandler
                       ) {
                        log.debug('Restart Worker for application ' + app.name);
                        brjx.cache.emit('worker-restart', app.name);
                        brjx.cache.application.items[app.name].worker = new Worker(module.resolve('./lib/worker.js'));
                        brjx.cache.application.items[app.name].worker.postMessage({name: app.name, action: 'register'}, true);
                        brjx.cache.emit('worker-started', app.name);
                        log.info('Started Worker for application ' + app.name);
                    } else {
                        log.debug('Worker for application ' + app.name + ' running');
                    }
                }

                brjx.cache.lastRefresh = (new Date()).getTime();

            }, brjx.config.get('watchdog.interval') * 1 || 2500);
        },
        enumerable: true,
        configurable: false
    });

    /**
     * ...
     * @see -
     * @param -
     * @since 0.0.1
     * @returns -
     */
    Object.defineProperty(self, 'getWorkers', {
        value: function() {

        },
        enumerable: true,
        configurable: false
    });


    /**
     * ...
     * @see -
     * @param -
     * @since 0.0.1
     * @returns -
     */
    Object.defineProperty(self, 'id', {
        get: function() {
            return module.id;
        },
        enumerable: true,
        configurable: false
    });


    return self;
}
]]>
      </script>
    </record>
    <record id="173067f2-4be3-4ab5-8833-cbebd5e260f1">
      <path>BRjx_workers/</path>
      <name>default</name>
      <type>properties</type>
      <version>0.0.1</version>
      <properties/>
      <script>
<![CDATA[
# BRjx_workers defaults

## properties
cache.timeout                           = 600000
watchdog.worker.interval                = 2500
]]>
      </script>
    </record>
    <record id="4b7b3b4c-8c3c-40b3-a160-62218917955a">
      <path>BRjx_workers/</path>
      <name>package</name>
      <type>json</type>
      <version>0.0.1</version>
      <properties/>
      <script>
<![CDATA[
{
    "name": "BRjx_workers",
    "version": "0.0.1",
    "description": "BRjx_workers",
    "keywords": [
        "BRjx",
        "Worker"
    ],
    "homepage": "https://github.com/ArthurStocker/basex-client",
    "repository": {
        "type": "git",
        "url": "https://github.com/ArthurStocker/basex-client"
    },
    "licenses": [{
        "type": "GNU General Public License 3",
        "url": "https://www.gnu.org/licenses/gpl-3.0.txt"
    }],
    "dependencies": {
    },
    "devDependencies": {},
    "engines": {
        "ringojs": ">= 1.0.0"
    },
    "scripts": {
        "test": "ringo"
    },
    "main": "monitor.js"
}
]]>
      </script>
    </record>
  </records>
</rc>