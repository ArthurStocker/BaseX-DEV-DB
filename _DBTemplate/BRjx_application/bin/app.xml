<app id="3f657ec4-b620-4883-a7f3-0d49ab7ba43c">
  <records>
    <record id="10539c73-90bc-4a7f-ac97-41e65e7a247b">
      <path>BRjx_router/</path>
      <name>main</name>
      <type>js</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
/**
 * @fileOverview ...
 * @author Arthur Stocker
 * @version 0.0.1
 */


/**
 * export ( ... )
 * 
 * eslint-disable 
 */
export (
    'Router'
);
/* eslint-enable */


/**
 * const ...
 */


/**
 * var ...
 */


/**
 * The module version string with the major and minor version number.
 */
var version = '0.0.1';


/**
 * default values
 */


/**
 * Create a Router object
 * @see -
 * @param -
 * @since 0.0.1
 * @returns {object} Router
 */
function Router(log) {
    if (!(this instanceof Router)) {
        return new Router(log);
    }

    // local variables
    var self = this;


    /**
     * ...
     * @see -
     * @param -
     * @since 0.0.1
     * @returns -
     */
    Object.defineProperty(self, 'cacheManager', {
        value: function(cacheHandler, cache, interval) {
            if (!cacheHandler || !cache)
                return;

            self.cacheWatcher = setInterval(function() {
                var startHandler = (new Date()).getTime();
                var lastModified = cacheHandler.getModulesLastModified();
                
                if (cache.lastModified * 1 < lastModified * 1 || cache.lastModified * 1 + 600000 < startHandler) {
                    log.info('Cache is to old or older then Database.  Database last modified ' + lastModified + ', Cache last modified ' + cache.lastModified + ', refresh cache.');

                    self.refreshCache(cacheHandler, cache);
                    cache.refreshed = true;
                    cache.lastModified = lastModified * 1 + 600000 > startHandler ? lastModified * 1 + 10000 : startHandler;

                    let elapsed = '' + ((new Date()).getTime() - startHandler);
                    log.info(Array(8 - elapsed.length).join(' ') + elapsed + 'ms refreshCache');

                    cache.emit('refreshed');
                } else {
                    log.debug('Cache is still valid. No refresh needed.');
                }
                cache.watchdog = (new Date()).getTime();
            }, interval || 5000);
        },
        enumerable: true,
        configurable: false
    });

    /**
     * ...
     * @see -
     * @param -
     * @since 0.0.1
     * @returns -
     */
    Object.defineProperty(self, 'refreshCache', {
        value: function(cacheHandler, cache) {
            if (!cacheHandler || !cache)
                return;

            (function(cacheHandler, cache) {
                log.info('Cache modules');
include('BRjx_plugin');

                log.info('Cache mountpoints');
                cache._mountpoints = {};
                (function(mountpoints) {
                    let cacheItems = cacheHandler.getCacheItems();
                    let mountpointHandlers = cacheItems.filter(function(item, index, array) {
                        if (({}).toString.call(item).replace(/.*\s(.*)\]/, '$1') == 'Array') {
                            console.log('-- ' + item[0]);
                            return item[0] == 'mountpoints';
                        } else {
                            return false;
                        }
                    });
                    console.log('>> '+JSON.stringify(mountpointHandlers[0]));
                    mountpointHandlers[0].forEach(function(item) {
                        if (({}).toString.call(item).replace(/.*\s(.*)\]/, '$1') == 'Array') {
                            console.log('++ ' + item[1]);
                            include(''+item[1]);
                        }
                    }); 
                    console.log('!! '+JSON.stringify(this));
                })(cache._mountpoints);
                cache.mountpoints = {
                    "GET": {
                        "/": function(session) {
                            return ['static', ['BRjx_frontend/test.html', 'text/html']];
                        },
                        "/dump": function(session) {
                            /**
                             * dump request
                             */
                            function dump(item, space) {
                                if (typeof(item) == 'string' || typeof(item) == 'number')
                                    session.debug(space + item);
                                if (typeof(item) == 'object') {
                                    var keys = Object.keys(item)
                                    for (var k in keys) {
                                        session.debug(space + keys[k]+' -> ');
                                        if ( keys[k].indexOf('servlet') == -1) dump(item[keys[k]], space +' ');
                                    }
                                } 
                            }

                            dump(session.getRequest, '');

                            session.debug(''+JSON.stringify(cache) + ' - ' + JSON.stringify(Object.keys(cache.mountpoints.GET)) + ' - ' + module.id);

                            Test();

                            return ['static', ['BRjx_frontend/test.html', 'text/html']];                
                        },
                        "/test": function(session) {
                            return ['static', ['BRjx_frontend/test.html', 'text/html']];
                        },
                        "/cache": function(session) {
                            cache.watchdog = 0;
                            return this["/"](session);
                        },
                        "/scripts": function(session) {
                            var mime = '';
                            var path = session.getRequestPath;
                            var extension = path.replace(/.*\.([^\.]*$)/,'$1');

                            if (extension == 'css') {
                                mime = 'text/css';
                            } else {
                                mime = 'application/javascript';
                            }

                            return ['static', [path.replace(/./, ''), mime]];
                        }
                    }
                };
            }).apply({},[cacheHandler, cache]);
        },
        enumerable: true,
        configurable: false
    });


    /**
     * ...
     * @see -
     * @param -
     * @since 0.0.1
     * @returns -
     */
    Object.defineProperty(self, 'dispatch', {
        value: function(cache, session) {
            let path = session.getRequestPath.replace(/(\/[^\/]*).*$/, '$1');

            if (typeof cache.mountpoints[session.getRequestMethod][path] != 'function') {
                return ['notFound'];
            } else {
                return cache.mountpoints[session.getRequestMethod][path](session);
            }
        },
        enumerable: true,
        configurable: false
    });


    return self;
}
]]>
      </script>
    </record>
    <record id="4df4d93c-099c-471f-b036-64069594dfe6">
      <path>BRjx_router/</path>
      <name>package</name>
      <type>json</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
{
    "name": "BRjx_router",
    "version": "0.0.1",
    "description": "BRjx_router",
    "keywords": [
        "BRjx",
        "Router"
    ],
    "homepage": "https://github.com/ArthurStocker/basex-client",
    "repository": {
        "type": "git",
        "url": "https://github.com/ArthurStocker/basex-client"
    },
    "licenses": [{
        "type": "GNU General Public License 3",
        "url": "https://www.gnu.org/licenses/gpl-3.0.txt"
    }],
    "dependencies": {
    },
    "devDependencies": {},
    "engines": {
        "ringojs": ">= 1.0.0"
    },
    "scripts": {
        "test": "ringo"
    },
    "main": "main.js"
}
]]>
      </script>
    </record>
    <record id="58a3d309-3e74-4eea-b392-a6568915dd27">
      <path>BRjx_library/</path>
      <name>main</name>
      <type>js</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
/**
 * @fileOverview Provides access to the BaseX Server.
 * @author Arthur Stocker
 * @version 0.0.1
 */


/**
 * config ...
 */
var { Config } = require('basex');
var Args = require('args');
var config = Config.load(module.resolve('./default.properties'));


/**
 * include ...
 */
 
 
/**
 * export ( ... )
 * 
 * eslint-disable 
 */
export (
    'Session'
);
/* eslint-enable */


/**
 * const ...
 */
const { Session } = require("./session"); //.js
const log = require("ringo/logging").getLogger(module.id);


/**
 * var ...
 */


/**
 * The module version string with the major and minor version number.
 */
var version = '0.0.1';


/**
 * default values
 */
]]>
      </script>
    </record>
    <record id="5810c8da-63f6-49f2-8df8-0505db51edf1">
      <path>BRjx_library/</path>
      <name>session</name>
      <type>js</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
/**
 * @fileOverview Provides the Session Object.
 * @author Arthur Stocker
 * @version 0.0.1
 */
const Logger = require('ringo/logging');
Logger.setConfig(getResource('config/log4j.properties'), true);


/**
 * config ...
 */
var { Config } = require('basex');
var Args = require('args');
var config = Config.load(module.resolve('./default.properties'));


/**
 * include ...
 */


/**
 * export ( ... )
 * 
 * eslint-disable 
 */
export (
    'Session'
);
/* eslint-enable */


/**
 * const ...
 */
const log = Logger.getLogger(module.id);


/**
 * var ...
 */
var response = require('ringo/jsgi/response');


/**
 * The module version string with the major and minor version number.
 */
var version = '0.0.1';


/**
 * default values
 */


/**
 * An HTTP session object based on top of servlet sessions.
 * Properties of the session's data object are persisted
 * between requests of the same client.
 * @class ServletSession
 *
 * @property {object} data - A container for things to store in this session between requests.
 *
 * @see - 
 * @since 0.0.1
 * @param {request} request - A JSGI or servlet request object.
 * @returns -
 */
function Session() {
    if (!(this instanceof Session)) {
        return new Session(arguments);
    }

    // local variables
    var self = this;


    // validate arguments
    var _args = Args([
        { request: Args.OBJECT | Args.Required }
    ], arguments);


    var data;
    var volatileData;
    var servletRequest = _args.request instanceof javax.servlet.ServletRequest ? _args.request :
        _args.request instanceof org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest ? _args.request.getHttpServletRequest() :
        _args.request instanceof org.eclipse.jetty.websocket.common.WebSocketSession ? _args.request.getUpgradeRequest().getHttpServletRequest() :
        _args.request.env.servletRequest;



    function getSession() {
        return servletRequest.getSession();
    }


    //
    //
    // Session properties
    //
    //


    /**
     * A container for things to store in this session between requests.
     * @see -
     * @param -
     * @since 0.0.1
     * @returns {string} sessionAttribute
     */
    Object.defineProperty(this, "data", {
        get: function() {
            if (!data) {
                // session.data is a JavaAdapter that directly proxies property access
                // to the attributes in the servlet session object.
                data = new JavaAdapter(org.mozilla.javascript.NativeObject, {
                    put: function(name, start, value) {
                        getSession().setAttribute(name, value);
                    },
                    get: function(name, start) {
                        if (Object.prototype[name]) {
                            return Object.prototype[name];
                        }
                        return getSession().getAttribute(name);
                    }
                });
            }
            return data;
        },
        enumerable: true
    });

    /**
     * The Session ID 
     */
    Object.defineProperty(this, "id", {
        get: function() {
            var id = getSession().getId();
            return id;
        },
        enumerable: true
    });


    /**
     * True if this session was created in the current request.
     * This can be useful to find out if the client has cookies disabled
     * for cookie-based sessions.
     */
    Object.defineProperty(this, "isNew", {
        get: function() {
            return getSession().isNew();
        },
        enumerable: true
    });

    /**
     * Createtime of the current session.
     */
    Object.defineProperty(this, "creationTime", {
        get: function() {
            return getSession().getCreationTime();
        },
        enumerable: true
    });

    /**
     * A time interval in seconds, which the session will be open.
     * If the interval is exceeded, the session gets invalidated.
     */
    Object.defineProperty(this, "maxInactiveInterval", {
        get: function() {
            return getSession().getMaxInactiveInterval();
        },
        set: function(interval) {
            return getSession().setMaxInactiveInterval(interval);
        },
        enumerable: true
    });

    /**
     * Time in Unix epoch milliseconds since the last client access.
     */
    Object.defineProperty(this, "lastAccessedTime", {
        get: function() {
            return getSession().getLastAccessedTime();
        },
        enumerable: true
    });

    /**
     * Destroys the current session and any data bound to it.
     */
    this.invalidate = function() {
        getSession().invalidate();
    };

    // save and reset the volatile session object
    volatileData = getSession().getAttribute("__volatileData__");
    getSession().setAttribute("__volatileData__", null);

    /**
     * A volatile property which survives a HTTP redirect and can be used
     * for warnings or error messages in forms. After a requests was handled,
     * the property is reset to null.
     */
    Object.defineProperty(this, "volatile", {
        get: function() {
            return volatileData;
        },
        set: function(value) {
            getSession().setAttribute("__volatileData__", value);
        },
        enumerable: true
    });


    //
    //
    // Request properties
    //
    //


    /**
     * Request 
     */
    Object.defineProperty(this, "getRequest", {
        get: function() {
            return _args.request;
        },
        enumerable: true
    });

    /**
     * TimeStamp of the Request
     */
    Object.defineProperty(this, "getRequestTimeStamp", {
        get: function() {
            var timeStamp = servletRequest.getTimeStamp();
            return timeStamp;
        },
        enumerable: true
    });

    /**
     * Method of the Request
     */
    Object.defineProperty(this, "getRequestMethod", {
        get: function() {
            var method = _args.request.method;
            return method;
        },
        enumerable: true
    });

    /**
     * Path of the Request
     */
    Object.defineProperty(this, "getRequestPath", {
        get: function() {
            var path = _args.request.pathInfo;
            return path;
        },
        enumerable: true
    });


    //
    //
    // Response properties
    //
    //


    /**
     * Response 
     */
    Object.defineProperty(this, "getResponse", {
        get: function() {
            return response;
        },
        enumerable: true
    });


    //
    //
    // Logger properties
    //
    //

    /**
     * Logger 
     */
    Object.defineProperty(this, "getLogger", {
        get: function() {
            return Logger;
        },
        enumerable: true
    });

    /**
     * Warper for log functions 
     */
    Object.keys(log).forEach(function(item, index, array) {
        Object.defineProperty(self, item, {
            get: function() {
                return log[item];
            },
            set: function() {
                var args = Args([
                    { listener: Args.FUNCTION | Args.Required }
                ], arguments);
                log.addListener(item, listener);
            },
            enumerable: true,
            configurable: false
        });
    });          
}
]]>
      </script>
    </record>
    <record id="cc5c4890-c91f-4bf7-a1f9-27fc756ebc72">
      <path>BRjx_library/</path>
      <name>default</name>
      <type>properties</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
# BRjx_library defaults

## properties
]]>
      </script>
    </record>
    <record id="7d708d1e-073a-47e6-a32a-d542bd8c15e2">
      <path>BRjx_library/</path>
      <name>package</name>
      <type>json</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
{
    "name": "BRjx_Library",
    "version": "0.0.1",
    "description": "BRjx_Library",
    "keywords": [
        "basex",
        "client"
    ],
    "homepage": "https://github.com/ArthurStocker/basex-client",
    "repository": {
        "type": "git",
        "url": "https://github.com/ArthurStocker/basex-client"
    },
    "licenses": [{
        "type": "GNU General Public License 3",
        "url": "https://www.gnu.org/licenses/gpl-3.0.txt"
    }],
    "dependencies": {
    },
    "devDependencies": {},
    "engines": {
        "ringojs": ">= 1.0.0"
    },
    "scripts": {
        "test": "ringo"
    },
    "main": "main.js"
}
]]>
      </script>
    </record>
    <record id="eb1af7ea-8aee-40b0-a718-0166121dd3c3">
      <path>BRjx_application/</path>
      <name>main</name>
      <type>js</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
/**
 * @fileOverview Provides access to the BaseX Server.
 * @author Arthur Stocker
 * @version 0.0.1
 */
const Logger = require('ringo/logging');
Logger.setConfig(getResource('config/log4j.properties'), true);


/**
 * config ...
 */
var { Config } = require('basex')
var Args = require('args');
var config = Config.load(module.resolve('./default.properties'));


/**
 * export ( ... )
 * 
 * eslint-disable 
 */
export(
    'init',
    'main'
);
/* eslint-enable */


/**
 * const ...
 */
const log = require('ringo/logging').getLogger(module.id);


/**
 * var ...
 */
var { EventEmitter } = require('ringo/events')
var { Session } = require('BRjx_library');
var BaseXClient;
var BaseXQuery;


/**
 * The module version string with the major and minor version number.
 */
var version = '0.0.1';


/**
 * default values
 */
var $ = module.singleton('$', function() {
    return {};
});
var cache = module.singleton('cache', function() {
    return {
        refreshed: false,
        mountpoints: {},
        lastModified: 0
    };
});


/**
 * Helper function
 */
//
function reloadRouter() {
    include(config.get('main.handlers'));
    $.router = new Router(log);
    $.router.cacheManager({  getCacheItems: getCacheItems, getModulesLastModified: getModulesLastModified }, cache);
}
//
function getCacheItems() {
    var client = new BaseXClient();
    var query = new BaseXQuery();

    query.string = config.get('main.getCacheItems');;

    return client.execQuery(query).data;
}
//
function getModulesLastModified() {
    var client = new BaseXClient();
    var query = new BaseXQuery();

    query.string = config.get('main.getModulesLastModified');

    return client.execQuery(query).data[1];
}

/**
 * Initialization
 */
function init(client, query) {
    BaseXClient = client;
    BaseXQuery = query;

    EventEmitter.call(cache);

    cache.addListener('refreshed', function() {
        log.info('Cache refreshed reload Router !');
        let startHandler = (new Date()).getTime();

        reloadRouter();

        let elapsed = '' + ((new Date()).getTime() - startHandler);
        log.info(Array(8 - elapsed.length).join(' ') + elapsed + 'ms reloadRouter');
    });

    reloadRouter();

    let watchdog = setInterval(function() {
        if (cache.watchdog * 1 + 30000 < (new Date()).getTime()) {
            log.warn('Router crashed. Restart Router.');
            reloadRouter();
        } else {
            log.debug('Router running.');
        }
    }, 30000);
}

/**
 * Application
 */
function main(request) {
    /**
     * var ...
     */
    var timeing = '\n\n';
    var elapsed = 0;


    /**
     * loadSession ...
     */
    var session = new Session(request);
    var startHandler = session.getRequestTimeStamp;

    elapsed = '' + ((new Date()).getTime() - startHandler);
    timeing += Array(8 - elapsed.length).join(' ') + elapsed + 'ms loadSession\n';

    log.warn('SESSION ID > ' + session.id);


    /**
     * cache was refreshed ...
     */
    if (cache.refreshed) {
        cache.refreshed = false;
    }


    /**
     * dispatch ...
     */
    let handler = $.router.dispatch(cache, session);

    elapsed = '' + ((new Date()).getTime() - startHandler);
    timeing += Array(8 - elapsed.length).join(' ') + elapsed + 'ms dispatchRequest\n';


    let content = session.getResponse[handler[0]].apply(session.getResponse, handler[1]);


    /**
     * handleRequest ...
     */
    elapsed = '' + ((new Date()).getTime() - startHandler);
    //timeing += Array(110).join('─') + '\n';
    timeing += Array(8 - elapsed.length).join(' ') + elapsed + 'ms handleRequest\n'
    timeing += Array(11).join(' ') + '{ path: "' + request.pathInfo + '" }\n';
    //timeing += Array(110).join('═') + '\n';

    log.debug(timeing);


    return content;
};
]]>
      </script>
    </record>
    <record id="9dfdf1e8-0e1a-4cb4-886c-60d625f6fb63">
      <path>BRjx_application/</path>
      <name>default</name>
      <type>properties</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
# BRjx_application defaults

## properties
main.handlers                   = BRjx_router
main.getCacheItems              = brjx:getCacheItems()
main.getModulesLastModified     = brjx:getModulesLastModified()
]]>
      </script>
    </record>
    <record id="5a333db1-7eb0-4123-8a20-eec3830471e8">
      <path>BRjx_application/</path>
      <name>package</name>
      <type>json</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
{
    "name": "BRjx_application",
    "version": "0.0.1",
    "description": "BRjx_application",
    "keywords": [
        "BRjx",
        "Application"
    ],
    "homepage": "https://github.com/ArthurStocker/basex-client",
    "repository": {
        "type": "git",
        "url": "https://github.com/ArthurStocker/basex-client"
    },
    "licenses": [{
        "type": "GNU General Public License 3",
        "url": "https://www.gnu.org/licenses/gpl-3.0.txt"
    }],
    "dependencies": {
    },
    "devDependencies": {},
    "engines": {
        "ringojs": ">= 1.0.0"
    },
    "scripts": {
        "test": "ringo"
    },
    "main": "main.js"
}
]]>
      </script>
    </record>
    <record id="9a0694cf-0685-41f3-ad73-74b22880ef6b">
      <path>BRjx_backend_amb/</path>
      <name>main</name>
      <type>js</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
/**
 * @fileOverview Provides access to the BaseX Server.
 */
const Logger = require('ringo/logging');
Logger.setConfig(getResource('config/log4j.properties'), true);


/**
 * config ...
 */
var { Config } = require('basex');
var Args = require('args');
var config = Config.load(module.resolve('./default.properties'));


/**
 * include ...
 */


/**
 * export ( ... )
 * 
 * eslint-disable 
 */

/* eslint-enable */


/**
 * const ...
 */
const log = Logger.getLogger(module.id);


/**
 * var ...
 */
var { Session } = require('BRjx_library');


/**
 * The module version string with the major and minor version number.
 */
var version = '0.0.1';


/**
 * default values
 */
var ambConnections = module.singleton('ambConnections', function() {
    return [];
});
var arrays = require('ringo/utils/arrays');


// onAMBConnect
module.exports = {
    'onConnect': function(socket, session) {
        var _session = new Session(session);
        log.debug('SESSION ID - [onConnect] > ' + _session.id);

        ambConnections.push(socket);
        socket.addListener('text', function(message) {
            ambConnections.forEach(function(socket) {
                socket.send(message);
            });
            var session = new Session(socket.session);
            log.info('Sending message to AMB client with SessionID: ' + session.id);
        });
        socket.addListener('close', function() {
            arrays.remove(ambConnections, socket);
            log.info('Closing AMB connection, ' + ambConnections.length + ' remaining');
        });
    },
    'onCreate': function(request, response) {
        var session = new Session(request);
        log.debug('SESSION ID - [onCreate] > ' + session.id);
        return true;
    }
};
]]>
      </script>
    </record>
    <record id="e54512ae-9945-4c84-9709-e5142f37f7d1">
      <path>BRjx_backend_amb/</path>
      <name>default</name>
      <type>properties</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
# BRjx_backend_amb defaults

## properties
]]>
      </script>
    </record>
    <record id="6751b35d-c477-4bd9-87d4-86270225501c">
      <path>BRjx_backend_amb/</path>
      <name>package</name>
      <type>json</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
{
    "name": "BRjx_backend_amb",
    "version": "0.0.1",
    "description": "BRjx_backend_amb",
    "keywords": [
        "basex",
        "client"
    ],
    "homepage": "https://github.com/ArthurStocker/basex-client",
    "repository": {
        "type": "git",
        "url": "https://github.com/ArthurStocker/basex-client"
    },
    "licenses": [{
        "type": "GNU General Public License 3",
        "url": "https://www.gnu.org/licenses/gpl-3.0.txt"
    }],
    "dependencies": {
    },
    "devDependencies": {},
    "engines": {
        "ringojs": ">= 1.0.0"
    },
    "scripts": {
        "test": "ringo"
    },
    "main": "main.js"
}
]]>
      </script>
    </record>
  </records>
    <records>
    <record id="c5d5fe35-47c6-48a8-b812-b9212dc988f0">
      <path>BRjx_backend_evc/</path>
      <name>main</name>
      <type>js</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
/**
 * @fileOverview Provides access to the BaseX Server.
 */
const Logger = require('ringo/logging');
Logger.setConfig(getResource('config/log4j.properties'), true);


/**
 * config ...
 */
var { Config } = require('basex');
var Args = require('args');
var config = Config.load(module.resolve('./default.properties'));


/**
 * include ...
 */


/**
 * export ( ... )
 * 
 * eslint-disable 
 */

/* eslint-enable */


/**
 * const ...
 */
const log = Logger.getLogger(module.id);


/**
 * var ...
 */
var { Session } = require('BRjx_library');


/**
 * The module version string with the major and minor version number.
 */
var version = '0.0.1';


/**
 * default values
 */
var evcConnections = module.singleton('evcConnections', function() {
    return [];
});
var arrays = require('ringo/utils/arrays');


// onESConnect
module.exports = function(source, request) {
    var session = new Session(request);

    evcConnections.push(source);
    log.info('Opening EVC connection, ' + evcConnections.length + ' open');
    source.session = session;
    source.addListener('close', function() {
        arrays.remove(evcConnections, source);
        log.debug('SESSION ID - [onConnect] > ' + source.session.id);
        log.info('Closing EVC connection, ' + evcConnections.length + ' remaining');
    });
    source.close();
};


function doPing() {
    if (evcConnections.length)
        log.debug('Sending ping to all ', evcConnections.length, ' EVC clients');

    evcConnections.forEach(function(source) {
        try {
            source.data('Ping ' + new Date());
        } catch (e) {
            log.error(e);
            arrays.remove(evcConnections, source);
        }
    });
}

setInterval(doPing, 2 * 1000);
]]>
      </script>
    </record>
    <record id="3a1975e8-a7ee-45d7-b919-cc5ad1019e64">
      <path>BRjx_backend_evc/</path>
      <name>default</name>
      <type>properties</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
# BRjx_backend_evc defaults

## properties
]]>
      </script>
    </record>
    <record id="c9b8ce1f-9be2-4ed9-89b5-f3ecfeb1fd9c">
      <path>BRjx_backend_evc/</path>
      <name>package</name>
      <type>json</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
{
    "name": "BRjx_backend_evc",
    "version": "0.0.1",
    "description": "BRjx_backend_evc",
    "keywords": [
        "basex",
        "client"
    ],
    "homepage": "https://github.com/ArthurStocker/basex-client",
    "repository": {
        "type": "git",
        "url": "https://github.com/ArthurStocker/basex-client"
    },
    "licenses": [{
        "type": "GNU General Public License 3",
        "url": "https://www.gnu.org/licenses/gpl-3.0.txt"
    }],
    "dependencies": {
    },
    "devDependencies": {},
    "engines": {
        "ringojs": ">= 1.0.0"
    },
    "scripts": {
        "test": "ringo"
    },
    "main": "main.js"
}
]]>
      </script>
    </record>
    <record id="d65fa37b-c3c4-4f5d-8d02-acd1249734d0">
      <path>BRjx_test/</path>
      <name>main</name>
      <type>js</type>
      <version>0.0.1</version>
      <properties type="array">
        <property>JSfn</property>
        <property>JSclass</property>
      </properties>
      <script>
<![CDATA[
/**
 * @fileOverview Provides test calasses to access the scrpts on the BaseX Server.
 * @author Arthur Stocker
 * @version 0.0.1
 */


/**
 * config ...
 */
var { Config } = require('basex');
var Args = require('args');
var config = Config.load(module.resolve('./default.properties'));


/**
 * include ...
 */


/**
 * export ( ... )
 * 
 * eslint-disable 
 */
export (
    'JSclass'
);
/* eslint-enable */


/**
 * const ...
 */
const log = require("ringo/logging").getLogger(module.id);


/**
 * var ...
 */


/**
 * The module version string with the major and minor version number.
 */
var version = '0.0.1';


/**
 * default values
 */


/**
 * JSfn function
 * @param {message}
 * @since: 0.0.1
 * @returns STRING
 */
function JSfn(message) {
  return config.get('test.string') + ' ' + message; 
}

/**
 * Create a JSclass 
 * @param {options}
 * @since: 0.0.1
 * @returns OBJECT
 */
function JSclass(options) {
  if (!(this instanceof JSclass)) {
    return new JSclass(options);
  }
  
  // validate options
  if (!options) {
    options = {};
  }

  // save options
  var propertyoptions = options;

  // object stuff

  // instance variable
  // ex.: var propertyinstVar;
  
  /**
   * Get String.
   * The Config is Stored in the global.Application.system object;
   * @see -
   * @param {message}
   * @since: 0.0.1
   * @returns STRING
   */
  this.getString = function(message) {
    return JSfn(message);
  }
}
]]>
      </script>
    </record>
    <record id="04dbd91e-ccb9-4b49-b120-a74c353d8c98">
      <path>BRjx_test/</path>
      <name>default</name>
      <type>properties</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
# BRjx_test defaults

## properties
test.string                     = FROM BRjx_test -- it`s working :
]]>
      </script>
    </record>
    <record id="a6008487-474e-4d00-bea7-46cb21f83837">
      <path>BRjx_test/</path>
      <name>package</name>
      <type>json</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
{
    "name": "BRjx_Test",
    "version": "0.0.1",
    "description": "Access the BaseX Database from Javascript",
    "keywords": [
        "basex",
        "client"
    ],
    "homepage": "https://github.com/ArthurStocker/basex-client",
    "repository": {
        "type": "git",
        "url": "https://github.com/ArthurStocker/basex-client"
    },
    "licenses": [{
        "type": "GNU General Public License 3",
        "url": "https://www.gnu.org/licenses/gpl-3.0.txt"
    }],
    "dependencies": {
    },
    "devDependencies": {},
    "engines": {
        "ringojs": ">= 1.0.0"
    },
    "scripts": {
        "test": "ringo"
    },
    "main": "main.js"
}
]]>
      </script>
    </record>
  </records>
</app>