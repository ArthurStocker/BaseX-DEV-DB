<rc id="9ecb0d1c-85c7-4064-98f5-f3b1aa28262e">
  <records>
    <record id="10539c73-90bc-4a7f-ac97-41e65e7a247b">
      <path>BRjx_router/</path>
      <name>router</name>
      <type>js</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
/**
 * @fileOverview ...
 * @author Arthur Stocker
 * @version 0.0.1
 */


/**
 * config ...
 */
config.merge(module.resolve('./default.properties'));


/**
 * export ( ... )
 * 
 * eslint-disable 
 */
export (
    'dispatch'
);
/* eslint-enable */


/**
 * const ...
 */


/**
 * var ...
 */


/**
 * default values
 */


/**
 * Method dispach
 * @see -
 * @param -
 * @since 0.0.1
 * @returns {array} response parameter
 */
function dispatch(session) {
    let path = session.getRequestPath.replace(/(\/[^\/]*).*$/, '$1');

    if (typeof brjx.cache.mountpoints[session.getRequestMethod][path] != 'function') {
        return ['notFound'];
    } else {
        return brjx.cache.mountpoints[session.getRequestMethod][path](session);
    }
}
]]>
      </script>
    </record>
    <record id="651614b1-282c-473e-82ec-6869f91d424e">
      <path>BRjx_router/</path>
      <name>default</name>
      <type>properties</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
# BRjx_router defaults

## properties
]]>
      </script>
    </record>
    <record id="4df4d93c-099c-471f-b036-64069594dfe6">
      <path>BRjx_router/</path>
      <name>package</name>
      <type>json</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
{
    "name": "BRjx_router",
    "version": "0.0.1",
    "description": "BRjx_router",
    "keywords": [
        "BRjx",
        "Router"
    ],
    "homepage": "https://github.com/ArthurStocker/basex-client",
    "repository": {
        "type": "git",
        "url": "https://github.com/ArthurStocker/basex-client"
    },
    "licenses": [{
        "type": "GNU General Public License 3",
        "url": "https://www.gnu.org/licenses/gpl-3.0.txt"
    }],
    "dependencies": {
    },
    "devDependencies": {},
    "engines": {
        "ringojs": ">= 1.0.0"
    },
    "scripts": {
        "test": "ringo"
    },
    "main": "router.js"
}
]]>
      </script>
    </record>
    <record id="2a5eb1c1-50dd-451f-9b21-b9156456b7cd" create="2018-01-01T00:00:00.000Z" read="2018-01-22T05:56:53.000Z" update="2018-01-22T05:56:53.000Z" delete="">
      <path>BRjx_workers/lib/</path>
      <name>mounter</name>
      <type>js</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
/**
 * @fileOverview ...
 * @author Arthur Stocker
 * @version 0.0.1
 */


/**
 * config ...
 */


/**
 * export ( ... )
 * 
 * eslint-disable 
 */

/* eslint-enable */


/**
 * const ...
 */
const log = Logger.getLogger(module.id);


/**
 * var ...
 */
var watchdogID;


/**
 * default values
 */
var type = module.id.replace(/.*\/(\w*\b)$/, '$1');


/**
 * Create a Worker interface
 * @see -
 * @param -
 * @since 0.0.1
 * @returns {event}
 */
var onmessage = function(event) {
    var { data } = event;

    if (data.type == type && data.action == 'register') {
        watchdogID = setInterval(function() {
            var startHandler = (new Date()).getTime();

            brjx.cache.data.workers[type].watchdog = (new Date()).getTime();
        }, config.get('watchdog.interval') * 1 || 2500);

        log.debug('Worker ' + type + ' registered');

        mount(brjx.cache);
    }
};


/**
 * ...
 * @see -
 * @param -
 * @since 0.0.1
 * @returns -
 */
function getCacheItems() {
    var client = new BaseXClient();
    var query = new BaseXQuery();

    query.string = 'brjx:getCacheItems()';

    return client.execQuery(query).data;
}


/**
 * ...
 * @see -
 * @param -
 * @since 0.0.1
 * @returns -
 */
function mount(subject) {
    if (!subject)
        return;

    (function(subject) {
        log.info('Load modules');
        include('BRjx_plugins');

Test();

        console.dir(this);

        log.info('Cache mountpoints');
        subject.mountpoints = {};
        let cacheItems = getCacheItems();
        let mountpointHandlers = cacheItems.filter(function(item, index, array) {
            if (({}).toString.call(item).replace(/.*\s(.*)\]/, '$1') == 'Array') {
                return item[0] == 'mountpoints';
            } else {
                return false;
            }
        });
        mountpointHandlers[0].forEach(function(item) {
            if (({}).toString.call(item).replace(/.*\s(.*)\]/, '$1') == 'Array') {
                log.info('Mount: '+item[1].replace(/([^\/]*)(\/[^\.]*)(.*)/, '$2').replace('index', ''));
                include(''+item[1]);
                let mountpoint = this[item[1].replace(/([^\.]*)(.*)/, '$1')];
                if (!subject.mountpoints[mountpoint.method])
                    subject.mountpoints[mountpoint.method] = {};
                let handler = mountpoint.handler.toSource().replace(/^\([^\(]*\(([^\)]*)\) {(.*)}\)$/, '$1ﬁ$2').split('ﬁ');
                subject.mountpoints[mountpoint.method][item[1].replace(/([^\/]*)(\/[^\.]*)(.*)/, '$2').replace('index', '')] = new Function(handler[0], handler[1]);
            }
        });
    }).apply({}, [subject]);
}
]]>
      </script>
    </record>
    <record id="ea3a70dd-60a7-47ac-b986-bd6a11dca7d9" create="2018-01-01T00:00:00.000Z" read="2018-01-22T05:56:53.000Z" update="2018-01-22T05:56:53.000Z" delete="">
      <path>BRjx_workers/lib/</path>
      <name>monitor</name>
      <type>js</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
/**
 * @fileOverview ...
 * @author Arthur Stocker
 * @version 0.0.1
 */


/**
 * config ...
 */


/**
 * export ( ... )
 * 
 * eslint-disable 
 */

/* eslint-enable */


/**
 * const ...
 */
const log = Logger.getLogger(module.id);


/**
 * var ...
 */
var watchdogID;


/**
 * default values
 */
var type = module.id.replace(/.*\/(\w*\b)$/, '$1');


/**
 * Create a Worker interface
 * @see -
 * @param -
 * @since 0.0.1
 * @returns {event}
 */
var onmessage = function(event) {
    var { data } = event;

    if (data.type == type && data.action == 'register') {
        watchdogID = setInterval(function() {
            var startHandler = (new Date()).getTime();

            brjx.cache.data.workers[type].watchdog = (new Date()).getTime();
        }, config.get('watchdog.interval') * 1 || 2500);

        log.debug('Worker ' + type + ' registered');
    }
};

    
/**
 * ...
 * @see -
 * @param -
 * @since 0.0.1
 * @returns -
 */
function getLastModified() {
    var client = new BaseXClient();
    var query = new BaseXQuery();

    query.string = 'brjx:getLastModified()';

    return client.execQuery(query).data[1];
}

/**
 * ...
 * @see -
 * @param -
 * @since 0.0.1
 * @returns -
 */
function observe(subject, interval) {
    if (!subject)
        return;

    self.observer = setInterval(function() {
        var startHandler = (new Date()).getTime();
        var lastModified = self.getLastModified();
        
        if (subject.lastModified * 1 < lastModified * 1 || subject.lastModified * 1 + (config.get('watchdog.workers.timeout') * 1 || 600000) < startHandler || subject.watchdog == 0) {
            log.info('Cache is to old or older then Database.  Database last modified ' + lastModified + ', Cache last modified ' + cache.lastModified + ', refresh cache.');

            self.refreshSubject(subject);
            subject.lastModified = lastModified * 1 + (config.get('watchdog.workers.timeout') * 1 || 600000) > startHandler ? lastModified * 1 + 10000 : startHandler;

            let elapsed = '' + ((new Date()).getTime() - startHandler);
            log.info(Array(8 - elapsed.length).join(' ') + elapsed + 'ms refreshCache');

            subject.emit('refreshed');
        } else {
            log.debug('Cache is still valid. No refresh needed.');
        }
        subject.watchdog = (new Date()).getTime();
    }, config.get('watchdog.interval') * 1 || 2500);
}
]]>
      </script>
    </record>
    <record id="e4ae1256-a2a3-49b7-ab51-1c0fc615b7a5">
      <path>BRjx_workers/</path>
      <name>launcher</name>
      <type>js</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
/**
 * @fileOverview ...
 * @author Arthur Stocker
 * @version 0.0.1
 */


/**
 * config ...
 */
config.merge(module.resolve('./default.properties'));


/**
 * export ( ... )
 * 
 * eslint-disable 
 */
export (
    'Launcher'
);
/* eslint-enable */


/**
 * const ...
 */
const { Worker } = require("ringo/worker");
const log = Logger.getLogger(module.id);


/**
 * var ...
 */


/**
 * default values
 */


/**
 * Create a Launcher object
 * @see -
 * @param -
 * @since 0.0.1
 * @returns {object} Launcher object
 */
function Launcher() {
    if (!(this instanceof Launcher)) {
        return new Launcher();
    }

    // local variables
    var self = this;


    if (({}).toString.call(brjx).replace(/.*\s(.*)\]/, '$1') != 'Object')
        return {};
    if (({}).toString.call(brjx.cache).replace(/.*\s(.*)\]/, '$1') != 'Object')
        return {};


/**
 *
 *
 *
    brjx.cache.addListener('....', function() {
        log.info('Cache refreshed, reload Worker !');
        let startHandler = (new Date()).getTime();

        reloadWorkers();

        let elapsed = '' + ((new Date()).getTime() - startHandler);
        log.info(Array(8 - elapsed.length).join(' ') + elapsed + 'ms reload Workers');
    });
*/

    /**
     * ...
     * @see -
     * @param -
     * @since 0.0.1
     * @returns -
     */
    Object.defineProperty(self, 'watchdog', {
        value: function() {

            if (({}).toString.call(brjx.cache).replace(/.*\s(.*)\]/, '$1') != 'Object')
                return;

            self.watchdogID = setInterval(function() {
                var startHandler = (new Date()).getTime();

                var repo = new org.ringojs.repository.DatabaseRepository(config.get('workers.library.path'), BaseXClient);
                                
                var resources = repo.resources;

                for (var i in resources) {
                    if (!brjx.cache.data.workers)
                        brjx.cache.data.workers = {};
                    var type = resources[i].name.replace(/([^\.]*).*/, '$1');
                    var lastModified = resources[i].lastModified();
                    if (
                        !brjx.cache.data.workers[type] ||
                        brjx.cache.data.workers[type].watchdog * 1 + (config.get('watchdog.interval') * 2 || 5000) < startHandler ||
                        brjx.cache.data.workers[type].lastModified * 1 != lastModified
                       ) {
                        log.debug('Restart Worker ' + type + ' from ' + module.resolve('./lib/' + resources[i].name));
                        brjx.cache.emit('worker-restart', type);
                        brjx.cache.data.workers[type] = new Worker(module.resolve('./lib/' + resources[i].name));
                        brjx.cache.data.workers[type].lastModified = lastModified;
                        brjx.cache.data.workers[type].postMessage({type: type, action: 'register'}, true);
                        brjx.cache.emit('worker-started', type);
                        log.info('Started Worker ' + type + ' from ' + module.resolve('./lib/' + resources[i].name));
                    } else {
                        log.debug('Worker ' + type + ' running');
                    }
                }

                brjx.cache.watchdog = (new Date()).getTime();

            }, config.get('watchdog.interval') * 1 || 2500);
        },
        enumerable: true,
        configurable: false
    });

    /**
     * ...
     * @see -
     * @param -
     * @since 0.0.1
     * @returns -
     */
    Object.defineProperty(self, 'getWorkers', {
        value: function() {

        },
        enumerable: true,
        configurable: false
    });


    return self;
}
]]>
      </script>
    </record>
    <record id="173067f2-4be3-4ab5-8833-cbebd5e260f1">
      <path>BRjx_workers/</path>
      <name>default</name>
      <type>properties</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
# BRjx_workers defaults

## properties
workers.library.path            = /BRjx_packages/BRjx_workers/lib/

watchdog.workers.timeout        = 600000
]]>
      </script>
    </record>
    <record id="4b7b3b4c-8c3c-40b3-a160-62218917955a">
      <path>BRjx_workers/</path>
      <name>package</name>
      <type>json</type>
      <version>0.0.1</version>
      <properties type="array"/>
      <script>
<![CDATA[
{
    "name": "BRjx_workers",
    "version": "0.0.1",
    "description": "BRjx_workers",
    "keywords": [
        "BRjx",
        "Worker"
    ],
    "homepage": "https://github.com/ArthurStocker/basex-client",
    "repository": {
        "type": "git",
        "url": "https://github.com/ArthurStocker/basex-client"
    },
    "licenses": [{
        "type": "GNU General Public License 3",
        "url": "https://www.gnu.org/licenses/gpl-3.0.txt"
    }],
    "dependencies": {
    },
    "devDependencies": {},
    "engines": {
        "ringojs": ">= 1.0.0"
    },
    "scripts": {
        "test": "ringo"
    },
    "main": "launcher.js"
}
]]>
      </script>
    </record>
  </records>
</rc>